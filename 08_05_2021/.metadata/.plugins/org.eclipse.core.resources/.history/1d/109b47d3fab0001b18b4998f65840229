package com.fullteaching.backend.comment;

import static org.mockito.Mockito.mock;

import java.util.ArrayList;
import java.util.List;

import org.junit.jupiter.api.Assertions;
import org.junit.jupiter.api.Test;

import com.fullteaching.backend.user.User;


public class CommentTest {
	@Test
	public void criaCommentVazio() {
		Comment c = new Comment();
		Assertions.assertEquals(0, c.getId());
	}
	
	@Test
	public void criaCommentComInfo() {
		User user = mock(User.class);
		Comment c = new Comment(
				"esta é uma mensagem", 
				55555,
				user
				);
		Assertions.assertEquals("esta é uma mensagem", c.getMessage());
		Assertions.assertEquals(55555, c.getDate());
		Assertions.assertEquals(user, c.getUser());
	}
	
	@Test
	public void criaCommentComSets() {
		User user = mock(User.class);
		String message = "teste";
		long date = 5555;
		
		Comment comment = new Comment();
		
		comment.setDate(date);
		comment.setMessage(message);
		comment.setUser(user);
		
		Assertions.assertEquals(message, comment.getMessage());
		Assertions.assertEquals(date, comment.getDate());
		Assertions.assertEquals(user, comment.getUser());
	}
	
	
	@Test
	public void criaCommentComUserECommentParent() {
		// creates comment
		User user = mock(User.class);
		String message = "comentario normal";
		long date = 555;
		Comment comment = new Comment(message, date, user);
		Assertions.assertEquals(message, comment.getMessage());
		Assertions.assertEquals(date, comment.getDate());
		
		// creates comment parent
		User userParent = mock(User.class);
		String messageParent = "comentario pai";
		long dateParent = 999;
		Comment commentParent = new Comment(messageParent, dateParent, userParent, comment);
		Assertions.assertEquals(messageParent, commentParent.getMessage());
		Assertions.assertEquals(dateParent, commentParent.getDate());
		comment.setCommentParent(commentParent);
		Assertions.assertEquals(commentParent, comment.getCommentParent());
	}
	
	@Test
	public void testId() {
		Comment comment = new Comment();
		comment.setId(3);
		Assertions.assertEquals(3, comment.getId());
	}
	
	@Test
	public void testMessage() {
		Comment comment = new Comment();
		comment.setMessage("teste");
		Assertions.assertEquals("teste", comment.getMessage());
	}
	
	@Test
	public void testDate() {
		Comment comment = new Comment();
		comment.setDate(1220227200);
		Assertions.assertEquals(1220227200, comment.getDate());
	}
	
	@Test
	public void testReplies() {
		User user = mock(User.class);
		String message = "teste";
		long date = 123;
		Comment comment = new Comment(message, date, user);
		User user2 = mock(User.class);
		String message2 = "teste 2";
		long date2 = 1234;
		Comment comment2 = new Comment(message2, date2, user2);
		List<Comment> listComment = new ArrayList<Comment>();
		listComment.add(comment2);
		comment.setReplies(listComment);
		Assertions.assertEquals(listComment, comment.getReplies());
	}
	
	
}
