package com.fullteaching.backend.user;

import org.junit.jupiter.api.Assertions;
import org.junit.jupiter.api.Test;
import org.springframework.security.crypto.bcrypt.BCryptPasswordEncoder;

import com.fullteaching.backend.course.Course;

import static org.mockito.Mockito.mock;

import java.util.ArrayList;
import java.util.HashSet;
import java.util.List;
import java.util.Set;

public class UserTest {
	
	@Test
	public void criaUserVazio() {
		User user = new User();
		Assertions.assertEquals(0, user.getId());
		
	}
	
	@Test
	public void criaUser() {
		User user = new User("nome", "senha", "n", "foto.png");
		
		Assertions.assertEquals("nome", user.getName());
		Assertions.assertEquals("n", user.getNickName());
		Assertions.assertEquals("foto.png", user.getPicture());
		
	}
	
	
	@Test
	public void criaUserViaSets() {
		// mocks
		long id = 22;
		long date = 555;
		
		List<String> roles = new ArrayList<>();
		roles.add("a");
		
		Set<Course> courses =  new HashSet<Course>();
		courses.add(mock(Course.class));
		
		// cria user vazio
		User user = new User();
		
		// seta os mocks no user
		user.setCourses(courses);
		user.setId(id);
		user.setName("Nome");
		user.setNickName("n");
		user.setPasswordHash("teste");
		user.setPicture("foto.png");
		user.setRegistrationDate(date);
		user.setRoles(roles);
		
		// verifica assertions
		Assertions.assertEquals("nome", user.getName());
		Assertions.assertEquals("n", user.getNickName());
		Assertions.assertEquals("foto.png", user.getPicture());
		Assertions.assertEquals("teste", user.getPasswordHash());
		Assertions.assertEquals(id, user.getId());
		Assertions.assertEquals(date, user.getRegistrationDate());
		Assertions.assertEquals(courses, user.getCourses());
		Assertions.assertEquals(roles, user.getRoles());
	}
	
	@Test
	public void testaEqualsComUsuariosDiferentes() {
		
	}
	
	@Test
	public void testaEqualsComMesmoUsuario() {
		
	}
	
	@Test
	public void testaHashCode() {
		
	}
	
	@Test
	public void testaToString() {
		
	}

}
